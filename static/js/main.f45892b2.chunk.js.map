{"version":3,"sources":["context/ThemeContext.js","components/DropdownSelect.jsx","components/TemperatureConverter.jsx","components/SingleDayWeather.jsx","components/WeeklyWeatherContainer.jsx","components/Fav.js","api/API1.js","utils/ValidityChecker.js","components/Geo.jsx","App.js","serviceWorker.js","components/IconComponent.js","components/HeaderComponent.js","components/Navbar.jsx","components/FavWeather.jsx","components/MyFav.jsx","index.js"],"names":["ThemeContext","React","createContext","theme","toggleTheme","ThemeContextProvider","children","useState","setTheme","colorTheme","saveThemePreference","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","hour","moment","format","daynightChecker","Provider","value","selectedTheme","DropdownSelect","customStyles","option","provided","state","borderBottom","color","isSelected","context","padding","backgroundColor","isFocused","console","log","singleValue","opacity","isDisabled","transition","className","styles","this","classNamePrefix","placeholder","isSearchable","name","options","props","locations","onChange","selectedOption","handleOnChange","label","code","Component","contextType","TemperatureConverter","type","id","checked","defaultChecked","htmlFor","SingleDayWeather","selectedDay","dayIndex","dayDate","dayKey","dayIcon","dayMinTemp","dayMaxTemp","selectedConvert","handleDaySelection","onClick","src","alt","WeeklyWeatherContainer","weatherData","selectedCity","Date","Day","Icon","IconPhrase","map","day","index","Temperature","Maximum","Value","parseFloat","toFixed","Minimum","EpochDate","Fav","city","active","favme","$","document","click","e","hasClass","is","target","has","length","on","toggleClass","isValid","isEmpty","isNil","Demo","updateAddress","latlong","a","axios","get","data","AdministrativeArea","EnglishName","Key","setState","formatCoords","latitude","longitude","getAddress","navigator","geolocation","getCurrentPosition","position","coords","error","Loading","App","d","getLocations","api_key","cityCountry","location","Country","push","locationsApi","x","loading","getForcast","isLoading","setTimeout","weatherForcast","fav","queryString","search","initfav","clearTimeout","prevProps","prevState","Fragment","style","minHeight","temperatureConverter","flat","indexOf","Object","keys","withRouter","Boolean","window","hostname","match","IconComponent","iconType","HeaderComponent","useContext","icons","unchecked","Navbar","border","zIndex","borderColor","to","pathname","hash","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","MyFav","handlecode","refresh","then","Promise","all","i","getDay","test","myfav","Index","forecast","DailyForecasts","classList","findIndex","getAttribute","splice","path","component","isAuthed","exact","bottom","left","href","rel","width","height","viewBox","fill","transform","aria-hidden","transformOrigin","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f45892b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport moment from 'moment-timezone'\n// import {Event} from '../utils/ReactAnalytics'\n\nconst ThemeContext = React.createContext({\n  theme: 'light',\n  toggleTheme: () => { }\n})\n\n\nconst ThemeContextProvider = ({ children }) => {\n  const [theme, setTheme] = useState('')\n  const colorTheme = theme === 'light' ? 'dark' : 'light'\n\n  const toggleTheme = () => {\n    const selectedTheme = theme === 'light' ? 'dark' : 'light'\n    // emitGA(selectedTheme)\n    setTheme(selectedTheme)\n    saveThemePreference(selectedTheme)\n  }\n\n  const saveThemePreference = theme => {\n    localStorage.setItem('theme', JSON.stringify(theme))\n  }\n\n  const daynightChecker = () => {\n    const hour = moment().format('H')\n    if (hour >= 6 && hour < 18) {\n      setTheme('light')\n      saveThemePreference('light')\n    } else {\n      setTheme('dark')\n      saveThemePreference('dark')\n    }\n  }\n\n  useEffect(() => {\n    // set theme based on the time on initial application load and\n    // when there is no theme preference in the localStorage\n    if (!localStorage.getItem('theme')) {\n      daynightChecker()\n    } else {\n      setTheme(JSON.parse(localStorage.getItem('theme')))\n    }\n    // eslint-disable-next-line\n  }, [])\n  // debugger\n  return (\n    <ThemeContext.Provider value={{ theme, colorTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport { ThemeContext } from '../context/ThemeContext'\n\nexport default class DropdownSelect extends Component {\n\n  customStyles = {\n\n    option: (provided, state) => ({\n      ...provided,\n      borderBottom: '1px dotted pink',\n      color: state.isSelected ? 'blue' : this.context.colorTheme === \"dark\" ? \"white\" : 'black',\n      padding: 10,\n      backgroundColor: this.context.colorTheme === \"dark\" ?\n        state.isFocused ? \"#2684FF\" : \"#212529 !important\"\n        :\n        state.isFocused ? \"#2684FF\" : console.log(state, \"lll\"),\n    }),\n    // control: () => ({\n    //   // none of react-select's styles are passed to <Control />\n    //   width: 200,\n    // }),\n    singleValue: (provided, state) => {\n      const opacity = state.isDisabled ? 0.5 : 1;\n      const transition = 'opacity 300ms';\n\n      return { ...provided, opacity, transition };\n    }\n  }\n\n  render() {\n    // const { theme, colorTheme } = this.context;\n    // debugger\n    return (\n      <div className=\"basic-single col-4 m-4 mx-auto search-bar\">\n        <Select\n          styles={this.customStyles}\n          classNamePrefix=\"select\"\n          placeholder=\"Search a city...\"\n          isSearchable=\"true\"\n          name=\"cities\"\n          options={this.props.locations}\n          onChange={selectedOption =>\n            this.props.handleOnChange(selectedOption.label, selectedOption.code)\n          }\n        />\n      </div>\n    );\n  }\n\n}\nDropdownSelect.contextType = ThemeContext;\n","import React, { Component } from \"react\";\n\nexport default class TemperatureConverter extends Component {\n  render() {\n    return (\n\n      <div className=\"form-switch pt-5 p-0\">\n\n        <span className=\"\" >℃</span>\n\n        <input\n          type='checkbox'\n          className=\"form-check-input mx-3\"\n          id='customSwitches'\n          onChange={value =>\n            this.props.handleOnChange(value)\n          }\n          checked={this.props.checked}\n          defaultChecked={true}\n        // readOnly\n        />\n        <label className=\"form-check-label\" htmlFor='customSwitches'>\n          ℉\n        </label>\n      </div>\n\n    );\n  }\n}\n","import React from \"react\";\nimport Moment from \"react-moment\";\n\nexport const SingleDayWeather = ({\n  selectedDay,\n  dayIndex,\n  dayKey,\n  dayDate,\n  dayIcon,\n  dayMinTemp,\n  dayMaxTemp,\n  selectedConvert,\n  handleDaySelection,\n}) => {\n  return (\n    <div\n      className={`single-day ${selectedDay === dayIndex ? \"selected\" : \"\"}`}\n      onClick={handleDaySelection}\n    >\n      <div className=\"flex-row bd-highlight m-2 \">\n        <h6>\n          <Moment format=\"ddd\">{dayDate}</Moment>\n        </h6>\n        <img\n          className=\"small-image\"\n          src={`https://developer.accuweather.com/sites/default/files/${dayIcon >= 10 ? dayIcon : \"0\" + dayIcon\n            }-s.png`}\n          alt=\"weather-icon\"\n        />\n        <h6>{dayMaxTemp} {selectedConvert ? \"°F\" : \"°C\"}</h6>\n        <h6>{dayMinTemp} {selectedConvert ? \"°F\" : \"°C\"}</h6>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { SingleDayWeather } from \"./SingleDayWeather\";\nimport Moment from \"react-moment\";\n\nexport const WeeklyWeatherContainer = ({\n  weatherData,\n  selectedCity,\n  selectedDay,\n  handleDaySelection,\n  selectedConvert\n}) => {\n  //debugger\n  return (\n    <div id={selectedCity} className=\"container col-11 mx-auto mt-2 gray  rounded text-white \">\n      {weatherData[0] ? (\n        <div className=\"d-flex p-2 bd-highlight justify-content-center top-weather\">\n          <div className=\"flex-row bd-highlight\">\n            <h4>{selectedCity}</h4>\n            <Moment format=\"dddd\">{weatherData[selectedDay].Date}</Moment>\n\n            <div className=\"flex-row bd-highlight\">\n              <img\n                src={`https://developer.accuweather.com/sites/default/files/${weatherData[selectedDay].Day.Icon >= 10\n                  ? weatherData[selectedDay].Day.Icon\n                  : \"0\" + weatherData[selectedDay].Day.Icon\n                  }-s.png`}\n                alt=\"weather-icon\"\n              />\n              <p>{weatherData[selectedDay].Day.IconPhrase}</p>\n            </div>\n          </div>\n        </div>\n      ) : null}\n\n      <div className=\"bd-highlight bottom-weather d-flex flex-wrap justify-content-center p-2\">\n        {weatherData.map((day, index) => (\n          <SingleDayWeather\n            selectedDay={selectedDay}\n            dayIndex={index}\n            key={day.EpochDate}\n            dayDate={day.Date}\n            dayIcon={day.Day.Icon}\n            dayMaxTemp={selectedConvert ? day.Temperature.Maximum.Value : ((parseFloat(day.Temperature.Maximum.Value) - 32) / 1.8).toFixed(2)}\n            dayMinTemp={selectedConvert ? day.Temperature.Minimum.Value : ((parseFloat(day.Temperature.Minimum.Value) - 32) / 1.8).toFixed(2)}\n            selectedConvert={selectedConvert}\n            handleDaySelection={() => handleDaySelection(index)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\r\n\r\n\r\n// import $ from \"jquery\";\r\nimport * as $ from 'jquery';\r\n\r\nimport \"bootstrap/dist/js/bootstrap.js\";\r\n// import \"bootstrap/dist/js/bootstrap.bundle.js\";\r\nexport default class Fav extends Component {\r\n    render() {\r\n        // debugger\r\n        // console.log(this.props.active, \"fav active\")\r\n        return (\r\n            <div id=\"\" className=\"pb-3\">\r\n                {/* flexbox */}\r\n                <div className=\"fav-btn\">\r\n\r\n                    <span\r\n                        code={this.props.code}\r\n                        city={this.props.city}\r\n                        onClick={this.props.handleOnChange}\r\n                        className={`favme dashicons dashicons-heart ${this.props.active ? \"active\" : \"\"}`}\r\n                    >{this.props.active ? \"Remove from favorits\" : \"Add to favorites\"}</span>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport function favme() {\r\n    // Favorite Button - Heart\r\n    // debugger\r\n    // $('.favme').click(function (x) {\r\n    //     // debugger\r\n    //     $(x.target).toggleClass('active');\r\n    // });\r\n    $(document).click(function (e) {\r\n        if ($('.collapse').hasClass('show') && !$('nav').is(e.target) && $('nav').has(e.target).length === 0) {\r\n            $('.navbar-toggler').click()\r\n        }\r\n    })\r\n\r\n    // $(window).click(function (e) {\r\n    //     e.preventDefault();\r\n    //     if ($(\".navbar-collapse\").hasClass(\"show\")) {\r\n    //         // $(\".navbar-toggler\").click();\r\n    //         $('.navbar-collapse').removeClass(\"show\");//collapse('toggle');//\r\n\r\n    //     }\r\n    //     //     // $('.collapse').collapse('hide');\r\n    // });\r\n\r\n\r\n    // $('.navbar-collapse').click(function (event) {\r\n    //     event.stopPropagation();\r\n    // });\r\n    /* when a user clicks, toggle the 'is-animating' class */\r\n    $(\".favme\").on('click touchstart', function () {\r\n        $(this).toggleClass('is_animating');\r\n    });\r\n\r\n    /*when the animation is over, remove the class*/\r\n    $(\".favme\").on('animationend', function () {\r\n        $(this).toggleClass('is_animating');\r\n    });\r\n}","/**\n * weather react serverless API functions URL\n */\nconst isProduction = process.env.NODE_ENV === 'production'\n/**\n * update the URLs to point to your Back-end project deployed URL\n * weather-react-api has access-control-origin restricted to iamsainikhil.com\n * all the requests initiated from any other domain (including localhost) will be rejected!\n */\n\nexport default isProduction\n  ? 'https://weather-react-api.now.sh'\n  : 'https://weather-react-api-dev.now.sh'\n","import { isEmpty, isNil } from 'lodash-es'\n\n/**\n * Check if the given value is valid or not\n * @param {*} value\n * @returns {Boolean}\n */\nconst isValid = (value) => {\n  // debugger\n  return !isEmpty(value) && !isNil(value)\n}\n\nexport default isValid\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport API_URL from '../api/API1'\r\nimport isValid from '../utils/ValidityChecker'\r\nimport validName from './../utils/ValidCityName'\r\n// import * as Sentry from '@sentry/browser'\r\n// extends Component\r\nexport default class Demo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n\r\n\r\n    }\r\n\r\n\r\n    // export const Demo = async () => {\r\n\r\n\r\n    // getForcast = async value => {\r\n    //     const forecast = await axios.get(\r\n    //         `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${value}?apikey=${this.api_key}&details=true`\r\n    //     )\r\n    //         .then(this.setState({ loading: false }));\r\n    //     console.log(forecast)\r\n    //     this.setState({\r\n    //         weatherForcast: forecast.data.DailyForecasts\r\n    //     });\r\n    // };\r\n    /**\r\n    * update address using reverse geocoding of Algolia PLaces to obtain city, state, country, cityID\r\n    */\r\n    updateAddress = async (latlong) => {\r\n        // debugger${API_URL}\r\n        // let hit = {}\r\n        try {\r\n            //  await axios.get(`https://weather-react-api-dev.vercel.app/address/coords/${latlong}`)\r\n\r\n            const data = (\r\n                await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=Wsq3PheOoDIcr7AlcgGAVrFwBchUHzyi&q=${latlong}`)\r\n            ).data\r\n            // var x = await key\r\n            // const { hits } = (\r\n            //     await axios.get(`https://weather-react-api-dev.vercel.app/address/coords/${latlong}`)\r\n            // ).data\r\n            // console.log(data)\r\n            // debugger\r\n            // hit = key[0]\r\n            // \r\n            if (isValid(data)) {\r\n                // debugger\r\n                const city = data.AdministrativeArea.EnglishName\r\n                const code = data.Key\r\n                // const city = hit.city ? hit.city[0] : ''\r\n                // const state = hit.administrative ? hit.administrative[0] : ''\r\n                // const country = hit.country ? hit.country : ''\r\n                // const cityName = `${validName(city)}${validName(state)}${validName(\r\n                //     country,\r\n                //     false\r\n                // )}`\r\n                // const cityId = hit.objectID ? hit.objectID : ''\r\n                // country_code in hit will be in lowercase\r\n                // const countryCode = hit.country_code\r\n                //     ? hit.country_code.toUpperCase()\r\n                //     : ''\r\n                // this.updateWeatherUnit(countryCode)\r\n                // debugger\r\n                // debugger\r\n                this.setState({ city: city })\r\n                this.props.handleOnChange(city, code, 1)\r\n                // return {\r\n                //     code: code,\r\n                //     city: city\r\n                // }\r\n                // this.updateState({\r\n                //     code: code,\r\n                //     city: city\r\n                // })\r\n            }\r\n        } catch (error) {\r\n\r\n            console.log(error)\r\n            //  Sentry.captureException(error)\r\n        }\r\n    }\r\n    formatCoords = (latitude, longitude) => {\r\n        // debugger\r\n\r\n        return `${latitude},${longitude}`\r\n    }\r\n    getAddress = async () => {\r\n\r\n        // debugger\r\n        //  const data = {}\r\n        if ('geolocation' in navigator) {\r\n\r\n\r\n\r\n            await navigator.geolocation.getCurrentPosition(\r\n\r\n                async (position) => {\r\n                    const latlong = this.formatCoords(\r\n                        position.coords.latitude,\r\n                        position.coords.longitude\r\n                    )\r\n                    // await\r\n                    var y = this.updateAddress(latlong)\r\n                    // debugger\r\n                    // data.y = y\r\n                    // data.position = position\r\n\r\n\r\n                },\r\n                (error) => {\r\n                    ///debugger\r\n                    console.error(error)\r\n                    //     this.getIPAddress()\r\n                }\r\n            )\r\n        } else {\r\n            // debugger\r\n            //  this.getIPAddress()\r\n        }\r\n        // debugger\r\n        // return data\r\n    }\r\n\r\n\r\n    // const d = await getAddress() //Promise.resolve(getAddress())\r\n    // debugger\r\n    // return d\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        // navigator.geolocation.getCurrentPosition(function (position) {\r\n        //     console.log(\"Latitude is :\", position.coords.latitude);\r\n        //     console.log(\"Longitude is :\", position.coords.longitude);\r\n        // });\r\n        this.getAddress()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Using geolocation JavaScript API in React</h4>\r\n                <span>your location :{this.state.city || \"please confirm access to your location\"}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// export default Demo;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport DropdownSelect from \"./components/DropdownSelect\";\nimport TemperatureConverter from \"./components/TemperatureConverter\";\nimport { WeeklyWeatherContainer } from \"./components/WeeklyWeatherContainer\";\nimport Fav from \"./components/Fav\";\nimport { favme } from \"./components/Fav\";\nimport Demo from \"./components/Geo\";\nimport { ThemeContext } from './context/ThemeContext'\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nimport {\n  useParams\n} from \"react-router-dom\";\n\n// import { FavContextProvider } from './context/FavContext'\n// import { fav } from './context/FavContext'\n\n\n// import { ThemeContextProvider } from './context/ThemeContext'\nconst Loading = () => <div className=\"loading\">\n  <div></div>\n  <div></div>\n</div>\n// const Paramss = () => {\n//   let { selectedCity, code } = useParams();\n//   debugger\n//   return { selectedCity: selectedCity, code: code }\n// }\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // console.log(this.props.match.params.id)\n    // debugger\n    this.api_key = \"Wsq3PheOoDIcr7AlcgGAVrFwBchUHzyi\"//\"Pcam0PjGtEMwkxAAI0LL8lIjSlpwkHFS\"//\"keIkcwQuwHMsCqZJawOVskNUec3ErVQq\"\n    this.state = {\n      loading: true,\n      locationsApi: [],\n      selectedCity: \"Tel Aviv\",\n      weatherForcast: [],\n      fav: [],\n      selectedDay: 0,\n      selectedConvert: true,\n      code: \"215854\"\n    };\n\n    // let value = this.context;\n  }\n  d = async () => await Demo()\n  async componentDidMount() {\n\n    // await this.d()\n    // const xc = await  \n    // const xc = await this.d()\n    // debugger\n    //console.log(uu, \"ssssssssssssssssssssssssssssssssssss\")\n\n    // if (\"geolocation\" in navigator) {\n    //   console.log(\"Available\");\n    // } else {\n    //   console.log(\"Not Available\");\n    // }\n    // navigator.geolocation.getCurrentPosition(function (position) {\n    //   console.log(position)\n    // });\n    await this.getLocations();\n    // let { selectedCity, code } = useParams();//this.Params()\n    // let { selectedCity, code } = Paramss()\n    // debugger\n    let { code, selectedCity } = queryString.parse(this.props.location.search)//this.props.location.state\n\n    this.handleOnChange(selectedCity || this.state.selectedCity, code || this.state.code)\n    favme()\n    this.setState({ fav: this.props.initfav() })\n    // this.isLoading = setTimeout(() => { this.setState({ loading: false }) }, 2300);\n  }\n  componentWillUnmount() {\n    clearTimeout(this.isLoading);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // debugger\n    if (prevProps.location.search !== this.props.location.search) {\n      this.handleOnChange(\"Tel Aviv\", \"215854\")\n      console.log('pokemons state has changed.')\n    }\n  }\n  // getForcast = async value => {\n  //   const forecast = await axios.get(\n  //     `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${value}?apikey=${this.api_key}&details=true`\n  //   )\n  //     .then(this.setState({ loading: false }));\n  //   console.log(forecast)\n  //   this.setState({\n  //     weatherForcast: forecast.data.DailyForecasts\n  //   });\n  // };\n\n  getLocations = async () => {\n    const locations = await axios.get(\n      `http://dataservice.accuweather.com/locations/v1/topcities/150?apikey=${this.api_key}`\n    );\n    // console.log(locations)\n    const cityCountry = [];\n    for (let location of locations.data) {\n      let label = location.AdministrativeArea.EnglishName;\n      let value = location.Country.EnglishName;\n      let code = location.Key;\n      cityCountry.push({ label, value, code });\n    }\n    this.setState({ locationsApi: cityCountry });\n\n    // this.setState({ loading: false })\n\n  };\n\n  handleOnChange = async (city, code, x) => {\n    // debugger\n    this.setState({ \"code\": code, \"selectedCity\": city, loading: true });//\n    // this.props.loading(true)\n    // debugger\n    // this.setState({ \"code\": code, \"selectedCity\": city });\n    var x = await this.props.getForcast(code)\n    this.isLoading = setTimeout(() => {\n      this.setState({\n        weatherForcast: x, loading: false\n      });\n    }, 500);\n\n  };\n\n  // handleDaySelection = e => {\n  //   this.setState({\n  //     selectedDay: e\n  //   });\n  // };\n\n  // temperatureConverter = e => {\n  //   console.log(e, e.target.checked)\n  //   this.setState({\n  //     selectedConvert: e.target.checked\n  //   });\n  // }\n  // fav = e => {\n  //   // console.log(e.target.getAttribute(\"code\"))\n  //   this.state.fav.push([e.target.getAttribute(\"city\"), e.target.getAttribute(\"code\")])\n  //   this.setState({\n  //     fav: this.state.fav\n  //   });\n  // }\n  // mayfav = () => {\n  //   this.setState({});\n  //   return this.state\n\n  //   // .weatherForcast ? Object.keys(this.state.weatherForcast).length === 0 ?\n  //   //   \"\" :\n  //   //   <WeeklyWeatherContainer\n  //   //     key=\"WeeklyWeatherContainer\"\n  //   //     handleDaySelection={this.handleDaySelection}\n  //   //     selectedDay={this.state.selectedDay}\n  //   //     selectedCity={this.state.selectedCity}\n  //   //     weatherData={this.state.weatherForcast}\n  //   //     selectedConvert={this.state.selectedConvert}\n  //   //   />\n  //   //   :\n  //   //   \"\"\n  // }\n  fav = (e) => {\n    $(e.target).toggleClass('active');\n    this.setState({\n      fav: this.props.fav(e)\n    })\n  }\n\n  render() {\n    const { theme, colorTheme } = this.context;\n    // debugger\n    console.log(this.state, \"state\")\n    console.log(this.props.state, \"prop state\")\n    return (\n      <React.Fragment>\n        {/* <ThemeContextProvider> */}\n        <div className={`pb-5 bg-${colorTheme} text-${theme} text-center`} style={{ minHeight: \"inherit\" }} >\n          <h1 className=\"pt-4\">Weather Forcast</h1>\n          {\n            this.props.location.search ? \"\" : <Demo handleOnChange={this.handleOnChange} />\n          }\n\n          <TemperatureConverter\n            handleOnChange={\n              (e) => {\n                this.setState({\n                  selectedConvert: this.props.temperatureConverter(e)\n                });\n              }\n            }\n            checked={this.selectedConvert}\n          />\n\n          <DropdownSelect\n            locations={this.state.locationsApi}\n            handleOnChange={this.handleOnChange}\n          />\n          <div className=\"content\">\n\n\n            {//this.state.selectedCity ?\n              this.state.weatherForcast ?\n                [/* <FavContextProvider> */\n                  < Fav\n                    key=\"fav\"\n                    city={this.state.selectedCity}\n                    code={this.state.code}\n                    active={this.state.fav.flat().indexOf(this.state.code) > -1}\n                    handleOnChange={(e) => this.fav(e)}\n                  //    {\n                  //   //  console.log([...e.target.classList].indexOf(\"active\"))\n                  //   // this.state.fav\n\n                  //   this.setState({\n                  //     fav: this.props.fav(e)\n                  //   })\n                  // }}\n                  />\n                  /* </FavContextProvider> */\n                  ,\n                  this.state.loading ?\n                    <Loading key=\"Loading\" />\n                    :\n                    Object.keys(this.state.weatherForcast).length === 0 ?\n                      \"\" :\n                      <WeeklyWeatherContainer\n                        key=\"WeeklyWeatherContainer\"\n                        handleDaySelection={(e) => {\n                          this.props.handleDaySelection(e)\n                          this.setState({\n                            selectedDay: e\n                          });\n                        }}\n                        selectedDay={this.state.selectedDay}\n                        selectedCity={this.state.selectedCity}\n                        weatherData={this.state.weatherForcast}\n                        selectedConvert={this.state.selectedConvert}\n                      />\n                ] : \"\"}\n\n          </div>\n        </div>\n        {/* </ThemeContextProvider> */}\n      </React.Fragment >\n    );\n  }\n}\n// debugger\n// console.log(fav, ThemeContext)\n\n// const AppContext = React.createContext({\n//   ...fav, ...\n// })\n// var data = {}\nApp.contextType = ThemeContext\n\n\nexport default withRouter(App);;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport {PropTypes} from 'prop-types'\nimport {FaSun, FaMoon} from 'react-icons/fa'\n\nconst IconComponent = ({iconType}) => {\n  return (\n    <div>\n      {iconType === 'light' ? (\n        <p className='text-toggle'>\n          <FaSun />\n        </p>\n      ) : (\n        <p className='text-toggle'>\n          <FaMoon />\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default IconComponent\n\nIconComponent.propTypes = {\n  iconType: PropTypes.string\n}\n","import React, { useContext } from 'react'\nimport Toggle from 'react-toggle'\n// import './ReactToggle.scss'\nimport { ThemeContext } from '../context/ThemeContext'\nimport IconComponent from './IconComponent'\nimport { isEmpty } from 'lodash-es'\n\nconst HeaderComponent = () => {\n  const { theme, toggleTheme } = useContext(ThemeContext)\n  // debugger\n  return (\n    <div className='flex justify-between items-center px-5 py-5'>\n\n      <div>\n        {/* below condition to avoid toggle glitch effect on page refresh */}\n        {!isEmpty(theme) ? (\n          <Toggle\n            checked={theme === 'light'}\n            icons={{\n              checked: <IconComponent iconType={'light'} />,\n              unchecked: <IconComponent iconType={'dark'} />,\n            }}\n            onChange={toggleTheme}\n          />\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nexport default HeaderComponent\n","import React, { Component } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\n// import App from '../App';\r\nimport HeaderComponent from \"./HeaderComponent\";\r\nimport { ThemeContext } from '../context/ThemeContext'\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        // debuggertheme,\r\n        const { colorTheme } = this.context;\r\n        return (\r\n\r\n            <nav className={`navbar navbar-expand-lg navbar-${colorTheme} bg-${colorTheme}`} style={{\r\n                border: \"solid\",\r\n                zIndex: 1,\r\n                borderColor: \"darksalmon\"\r\n            }} >\r\n                <div className=\"container-fluid\">\r\n\r\n                    <NavLink className=\"navbar-brand\" to={{\r\n                        pathname: \"/\",\r\n                        search: \"\",\r\n                        hash: \"\",\r\n                        state: {}\r\n                    }} >\r\n                        Home\r\n          </NavLink>\r\n                    <button className=\"navbar-toggler ms-sm-auto\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" to=\"/MyFav\">\r\n                                    MyFav\r\n                </NavLink>\r\n                            </li>\r\n\r\n                        </ul>\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <HeaderComponent />\r\n                            </li>\r\n\r\n                        </ul>\r\n\r\n                    </div>\r\n                    <div className=\"navbar-brand text-wrap\">Herolo - Weather App</div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\nNavbar.contextType = ThemeContext;\r\n\r\nexport default Navbar;\r\n\r\n","import React from \"react\";\r\n// import { SingleDayWeather } from \"./SingleDayWeather\";\r\nimport Moment from \"react-moment\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport App from '../App';\r\nimport Fav from \"./Fav\";\r\n\r\nexport const WeeklyWeatherContainer = ({\r\n    weatherData,\r\n    selectedCity,\r\n    code,\r\n    selectedDay,\r\n    handleDaySelection,\r\n    selectedConvert,\r\n    fav\r\n}) => {\r\n    // debugger\r\n    return (\r\n\r\n\r\n        // <Route path=\"/\" exact component={\r\n        //     () => <App\r\n        //         state={this.state}\r\n        //         initfav={this.initfav}\r\n        //         // loading={this.loading}\r\n        //         getForcast={this.getForcast}\r\n        //         temperatureConverter={this.temperatureConverter}\r\n        //         handleDaySelection={this.handleDaySelection}\r\n        //         fav={this.fav} isAuthed={true} />\r\n        // }>\r\n        <div className=\"col-11 flex-fill m-0 m-2 navbar-brand\">\r\n            {/* col-11 flex-fill m-0 m-2 */}\r\n\r\n            <div id={selectedCity} code={code} className=\"container h-100  mx-auto mt-2 gray  rounded text-white \">\r\n\r\n                {weatherData[0] ? (\r\n                    <Link className=\" navbar-brand\" to={{\r\n                        pathname: \"/\",\r\n                        search: \"?selectedCity=\" + selectedCity + \"&code=\" + code,\r\n                        //hash: \"#the-hash\",\r\n                        // state: { selectedCity: selectedCity, code: code }\r\n                    }}>\r\n                        <div className=\"d-flex p-2 bd-highlight justify-content-center text-light text-break \">\r\n\r\n                            <div className=\"flex-row bd-highlight text-wrap\">\r\n\r\n                                <h4>{selectedCity}</h4>\r\n                                <Moment format=\"dddd\">{weatherData[selectedDay].Date}</Moment>\r\n\r\n                                <div className=\"flex-row bd-highlight\">\r\n                                    <span className=\"\">\r\n                                        {selectedConvert ? weatherData[selectedDay].Temperature.Minimum.Value + \" F°\" : ((parseFloat(weatherData[selectedDay].Temperature.Minimum.Value) - 32) / 1.8).toFixed(2) + \" C°\"}\r\n                                    </span>                            <img\r\n                                        src={`https://developer.accuweather.com/sites/default/files/${weatherData[selectedDay].Day.Icon >= 10\r\n                                            ? weatherData[selectedDay].Day.Icon\r\n                                            : \"0\" + weatherData[selectedDay].Day.Icon\r\n                                            }-s.png`}\r\n                                        alt=\"weather-icon\"\r\n                                    />\r\n                                    <span>\r\n                                        {selectedConvert ? weatherData[selectedDay].Temperature.Maximum.Value + \" F°\" : ((parseFloat(weatherData[selectedDay].Temperature.Maximum.Value) - 32) / 1.8).toFixed(2) + \" C°\"}\r\n                                    </span>\r\n\r\n                                    <p>{weatherData[selectedDay].Day.IconPhrase}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Link>\r\n                ) : null}\r\n                < Fav\r\n                    key={code}\r\n                    city={selectedCity}\r\n                    code={code}\r\n                    active={true}\r\n                    handleOnChange={(e) => fav(e)}\r\n                />\r\n            </div >\r\n            {/* </Link > */}\r\n\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from \"react\";\r\n// import { WeeklyWeatherContainer } from \"./WeeklyWeatherContainer\";\r\nimport { WeeklyWeatherContainer } from \"./FavWeather\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nimport TemperatureConverter from \"./TemperatureConverter\";\r\nimport { ThemeContext } from '../context/ThemeContext'\r\nimport { favme } from \"./Fav\";\r\n\r\n// import App from '../App';\r\nconst Loading = () => <div className=\"loading\">\r\n    <div></div>\r\n    <div></div>\r\n</div>\r\n\r\nexport default class MyFav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // debugger\r\n        this.api_key = \"jdJtjY5LHZvdj0IS8iiRqturSfo6sjq3\"//\"Pcam0PjGtEMwkxAAI0LL8lIjSlpwkHFS\" //\"keIkcwQuwHMsCqZJawOVskNUec3ErVQq\"\r\n        this.state = {\r\n            loading: true,\r\n            locationsApi: [],\r\n            selectedCity: 0,\r\n            weatherForcast: [],\r\n            selectedDay: new Date().getDay(), //0,\r\n            selectedConvert: true,\r\n            code: \"\",\r\n            weatherData: [],\r\n            fav: []\r\n        };\r\n        this.test = [[\"Dhaka000\", \"28143\"]]\r\n        // this.data = this.test.map(async (x, i) => {\r\n        //     var t = await this.handlecode(x[0], x[1])\r\n        //     return t\r\n        // })\r\n        // this.data()\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // if (localStorage.getItem('fav')) {\r\n        //    this.state.fav = localStorage.getItem('fav')\r\n        // }\r\n        this.refresh()\r\n        favme()\r\n        // this.props.initfav()\r\n\r\n        // this.data().then(data => {\r\n        //     this.setState({ \"weatherData\": data });//.flat()\r\n        //     console.log(data)\r\n        // })\r\n        // if (this.props.MyFav)\r\n        //     this.data().then(data => {\r\n        //         this.setState({ \"weatherData\": data.flat() });\r\n        //         console.log(data)\r\n        //     })\r\n    }\r\n    componentWillMount() {\r\n        // debugger\r\n        this.setState({ fav: this.props.initfav() })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        // debugger\r\n\r\n\r\n\r\n        //   this.refresh()\r\n    }\r\n    handlecode = async (city, code) => {\r\n        // this.setState({ \"code\": code, \"selectedCity\": city, loading: true });//\r\n        // this.props.loading(true)\r\n        // debugger\r\n        // this.setState({ \"code\": code, \"selectedCity\": city });\r\n        var x = await this.props.getForcast(code)\r\n        return x\r\n        // this.isLoading = setTimeout(() => {\r\n        //     this.setState({\r\n        //         weatherForcast: x, loading: false\r\n        //     });\r\n        // }, 1000);\r\n\r\n    }\r\n    refresh = () => {\r\n        if (this.state.fav)\r\n            this.data().then(data => {\r\n                this.setState({ \"weatherData\": data });//.flat()\r\n\r\n                console.log(data)\r\n            })\r\n        // \r\n    }\r\n    // componentWillMountnt() {\r\n    //     if (this.props.MyFav)\r\n    //         this.data().then(data => {\r\n    //             this.setState({ \"weatherData\": data.flat() });\r\n    //             console.log(data)\r\n    //         })\r\n    // }\r\n    data = async () => {\r\n        return Promise.all(this.state.fav.map((x, i) => this.props.getForcast(x[1]))).then(data => {\r\n            return data\r\n            //  console.log(data)\r\n        })\r\n        // const a = await weatherData;\r\n        // console.log(a)\r\n        // return a\r\n    }\r\n    fav = (e) => {\r\n        // debugger\r\n        $(e.target).toggleClass('active');\r\n        this.state.fav = this.props.fav(e)\r\n        this.refresh()\r\n        // this.setState({\r\n        //     fav: \r\n        // })\r\n    }\r\n    render() {\r\n\r\n        const { theme, colorTheme } = this.context;\r\n        console.log(this.state, \"state my fav\")\r\n        console.log(this.props.myfav, this.state.weatherData, \"my fav\")\r\n        // debugger\r\n        return (\r\n            <div className={`pb-5 bg-${colorTheme} text-${theme} text-center`} style={{ minHeight: \"inherit\" }} >\r\n                <h1 className=\"pt-4\">My favorites</h1>\r\n                {\r\n                    this.state.weatherData.length ? <TemperatureConverter\r\n                        handleOnChange={\r\n                            (e) => {\r\n                                this.setState({\r\n                                    selectedConvert: this.props.temperatureConverter(e)\r\n                                });\r\n                            }\r\n                        }\r\n                        checked={this.selectedConvert}\r\n                    /> : \"\"\r\n                }\r\n                <div className=\"d-flex flex-lg-nowrap flex-wrap\">\r\n                    {\r\n\r\n                        this.state.weatherData.length ?\r\n                            this.state.fav.map((x, i) => {\r\n                                // var data = async () => await .props.myfav\r\n                                return (\r\n                                    <WeeklyWeatherContainer\r\n                                        key={i}\r\n                                        handleDaySelection={(e) => {\r\n                                            //  this.props.handleDaySelection(e)\r\n                                            this.setState({\r\n                                                selectedDay: e\r\n                                            });\r\n                                        }}\r\n                                        selectedDay={this.state.selectedDay}\r\n                                        selectedCity={x[0]}\r\n                                        code={x[1]}\r\n                                        weatherData={this.state.weatherData[i]}\r\n                                        selectedConvert={this.state.selectedConvert}\r\n                                        fav={this.fav}\r\n                                    />\r\n\r\n                                )\r\n                            })\r\n                            : this.state.fav.length ? <Loading key=\"Loading\" />\r\n                                : <h1>No favorites found</h1>\r\n\r\n                    }\r\n                </div >\r\n                {/* ${this.data().then(data => {\r\n                                this.setState({ \"weatherData\": data });//.flat()\r\n                                console.log(data)\r\n                            })} */}\r\n            </div >\r\n        );\r\n    }\r\n}\r\nMyFav.contextType = ThemeContext\r\n","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Navbar from \"./components/Navbar\";\nimport { Switch, Route } from \"react-router-dom\";\nimport MyFav from \"./components/MyFav\";\n// import HeaderComponent from \"./components/HeaderComponent\";\nimport { ThemeContextProvider } from './context/ThemeContext'\nimport { ThemeContext } from './context/ThemeContext'\nimport axios from \"axios\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nclass Index extends Component {\n  constructor() {\n    super();\n    this.api_key = \"Wsq3PheOoDIcr7AlcgGAVrFwBchUHzyi\"//\"Pcam0PjGtEMwkxAAI0LL8lIjSlpwkHFS\" //\"keIkcwQuwHMsCqZJawOVskNUec3ErVQq\"\n    this.state = {\n      loading: true,\n      locationsApi: [],\n      selectedCity: 0,\n      weatherForcast: [],\n      myfav: [],\n      selectedDay: \"0\",\n      selectedConvert: true,\n      code: \"\"\n    };\n    // let value = this.context;\n  }\n  // loading = (x) => {\n  //   // debugger\n  //   this.setState({ loading: x })\n  // }\n  getForcast = async value => {\n\n    const forecast = await axios.get(\n      `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${value}?apikey=${this.api_key}&details=true`\n    )\n    //      .then();\n\n    this.state.weatherForcast = forecast.data.DailyForecasts\n    return forecast.data.DailyForecasts\n    // console.log(forecast)\n    // this.setState({\n    //   weatherForcast: forecast.data.DailyForecasts\n    // });\n  };\n  handleDaySelection = e => {\n\n    this.state.selectedDay = e\n\n    return e\n    // this.setState({\n    //   selectedDay: e\n    // });\n  };\n\n  temperatureConverter = e => {\n    // console.log(e, e.target.checked)\n    this.state.selectedConvert = e.target.checked\n    return e.target.checked\n  }\n  fav = e => {\n    // console.log(e.target.getAttribute(\"code\"))\n    // debugger\n    var myfav = this.state.myfav\n    var target = e.target\n    if ([...target.classList].indexOf(\"active\") === -1) {\n      var index = myfav.findIndex(x => x[1] === target.getAttribute(\"code\"))\n      myfav.splice(index, 1)\n    } else {\n      myfav.push([target.getAttribute(\"city\"), target.getAttribute(\"code\")])\n    }\n\n    localStorage.setItem('fav', JSON.stringify(myfav))\n\n\n    return myfav\n    // this.setState({\n    //   fav: this.state.myfav\n    // });\n  }\n  initfav = () => {\n    if (localStorage.getItem('fav')) {\n      /// debugger\n      this.state.myfav = JSON.parse(localStorage.getItem('fav'))\n    }\n    //debugger\n    // console.log(e.target.getAttribute(\"code\"))\n    return this.state.myfav\n  }\n  render() {\n    const { theme, colorTheme } = this.context;\n    // debugger\n    // console.log(this.state)\n    return (\n      <ThemeContextProvider>\n        <BrowserRouter>\n          {/* pb-5 style={{ height: \"0\" }}*/}\n          <header className={` bg-${colorTheme} text-${theme}`} >\n            <Navbar />\n          </header>\n          {/* pt-5 */}\n          <main className=\"flex-column\" style={{ minHeight: \"450px\" }}>\n            {/* style={{ minHeight: \"inherit\" }} */}\n            <Switch>\n              <Route path=\"/MyFav\" component={() => <MyFav\n                initfav={this.initfav}\n                myfav={this.state.myfav}\n                state={this.state}\n                getForcast={this.getForcast}\n                temperatureConverter={this.temperatureConverter}\n                handleDaySelection={this.handleDaySelection}\n                fav={this.fav}\n                isAuthed={true}\n              />} />\n              <Route path=\"/\" exact component={() => <App\n                state={this.state}\n                initfav={this.initfav}\n                // loading={this.loading}\n                getForcast={this.getForcast}\n                temperatureConverter={this.temperatureConverter}\n                handleDaySelection={this.handleDaySelection}\n                fav={this.fav} isAuthed={true}\n              />}\n              />\n            </Switch>\n          </main >\n          <footer>\n            <div className=\"text-center\">\n              <span>made with love by yair ♥</span>\n              <div style={{\n                position: 'fixed',\n                // top: 0,\n                bottom: 0,\n                border: 0,\n                left: 0,\n              }}>\n                <a\n                  href='https://github.com/iamsainikhil/weather-react'\n                  className='github-corner'\n                  aria-label='View source on GitHub'\n                  target='_blank'\n                  rel='noreferrer noopener'>\n                  <svg\n                    width='80'\n                    height='80'\n                    viewBox='0 0 250 250'\n                    style={{\n                      fill: '#292929',\n                      color: '#fff',\n\n                      transform: 'scale(-1, -1)',\n                    }}\n                    aria-hidden='true'>\n                    <path d='M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z'></path>\n                    <path\n                      d='M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2'\n                      fill='currentColor'\n                      style={{ transformOrigin: '130px 106px' }}\n                      className='octo-arm'></path>\n                    <path\n                      d='M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z'\n                      fill='currentColor'\n                      className='octo-body'></path>\n                  </svg>\n                </a>\n              </div>\n\n            </div>\n          </footer>\n        </BrowserRouter>\n      </ThemeContextProvider>\n    )\n\n  }\n}\nIndex.contextType = ThemeContext;\n\n// import \"bootstrap/dist/js/bootstrap.bundle.js\";\n// import \"bootstrap/dist/js/bootstrap.js\";\nReactDOM.render(\n  <Index />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}